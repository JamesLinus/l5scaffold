<?php

namespace App\Http\Controllers;

use {{namespace}}{{Model}};
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;

class {{Model}}Controller extends Controller
{
	/**
	 * Variable to model
	 *
	 * @var {{model}}
	 */
	protected $model;

	/**
	 * Create instance of controller with Model
	 *
	 * @return void
	 */
	public function __construct({{Model}} $model)
	{
		$this->model = $model;
	}

	/**
	 * Display a listing of the resource.
	 *
	 * @return Response
	 */
	public function index()
	{
		${{models}} = $this->model->paginate();

		return view('{{models}}.index', compact('{{models}}'));
	}

	/**
	 * Show the form for creating a new resource.
	 *
	 * @return Response
	 */
	public function create()
	{
		return view('{{models}}.create');
	}

	/**
	 * Store a newly created resource in storage.
	 *
	 * @param Request $request
	 * @return Response
	 */
	public function store(Request $request)
	{
        $validator = Validator::make($request->input(), [
            {{validation_fields}}
        ]);

        if($validator->fails()){

            return redirect()->back()->withErrors($validator)->withInput();

        }

		$inputs = $this->inputs($request);
		$this->model->create($inputs);

		return redirect()->route('{{prefix}}{{models}}.index')->with('message', 'Item created successfully.');
	}

	/**
	 * Display the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function show($id)
	{
        $validator = Validator::make(['id' => $id], [
            'id' => 'required|exists:{{models}},id'
        ]);

        if($validator->fails()){

            return redirect()->back()->withErrors($validator);

        }

		${{model}} = $this->model->findOrFail($id);
		
		return view('{{models}}.show', compact('{{model}}'));
	}

	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id)
	{
	    $validator = Validator::make(['id' => $id], [
            'id' => 'required|exists:{{models}},id'
        ]);

        if($validator->fails()){

            return redirect()->back()->withErrors($validator);

        }

		${{model}} = $this->model->findOrFail($id);
		
		return view('{{models}}.edit', compact('{{model}}'));
	}

	/**
	 * Update the specified resource in storage.
	 *
	 * @param  int  $id
	 * @param Request $request
	 * @return Response
	 */
	public function update(Request $request, $id)
	{
        $validator = Validator::make($request->input(), [
            {{validation_fields}}
        ]);

        if($validator->fails()){

            return redirect()->back()->withErrors($validator)->withInput();

        }

		$inputs = $this->inputs($request);

		${{model}} = $this->model->findOrFail($id);		
		${{model}}->update($inputs);

		return redirect()->route('{{prefix}}{{models}}.index')->with('message', 'Item updated successfully.');
	}

	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy($id)
	{
        $validator = Validator::make(['id' => $id], [
            'id' => 'required|exists:{{models}},id'
        ]);

        if($validator->fails()){

            return redirect()->back()->withErrors($validator)->withInput();

        }

		$this->model->destroy($id);

		return redirect()->route('{{prefix}}{{models}}.index')->with('message', 'Item deleted successfully.');
	}

	/**
	* Return the correct array of inputs
	*
	* @param null
	*
	*/
	protected function inputs(Request $request){
	    $inputs = $request->all();
	    unset($inputs['_token'], $inputs['_method']);
	    return $inputs;
	}

}